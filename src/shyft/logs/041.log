# SHIFT #041


## ZEUS: Complex Prompt Creation — Internet/Technology

----

1. ### TikTok: Culture, Society, and the Constitutionality of a TikTok Ban


#### System Instructions

> **Directive**

> Given a user query and a set of text snippets, please generate an apt synopsis of the authors’ consensus opinion on the query’s subject matter. You should derive your answer exclusively from the text that I provide to you, citing your sources by superscripting statements with a lowercase letter (e.g., [^{a,} \ ^{b,} \ ^{c}](tex://^{a,} \ ^{b,} \ ^{c})) and then noting the source's provided title alongside its designated superscripted, lowercase letter in a footnote at the end of your response.

----

**Example**
> Suppose that I provide you with three sources, titled `this_source`, `that_source`, and `other_source`. Further suppose that you elect to reference it in your response. In such a scenario, this is how the relevant section of your response might appear:

> 	This is a sentence that explicitly mentions the title and/or author of  `this_source`.[$$^a$$](tex://$$^a$$) Related, this is a sentence that expounds upon the previous statement. This, on the other hand, is a sentence that references `that_source` but does not directly mention the title; it must still properly cite the reference material as per the Directive.[$$^b$$](tex://$$^b$$) To elaborate, this is a sentence that builds upon the previous. Finally, this is a sentence that directly quotes material from `other_source`, which posits that “…this is a direct quote.” This is a strong concluding sentence.

> The corresponding footnote would then appear as follows:

> 	[^a](tex://^a) `this_source`

> 	[^b](tex://^b) `that_source`

> 	[^c](tex://^c) `other_source`

----

**Additional Considerations**
> As you compose your response, pay special attention to these ancillary guidelines:

> - Your response should be at least 250 words long, but it should not be longer than 1000 words.
> - To demonstrate that you have assuredly identified a consensus opinion, you should aim to connect disparate sources of information by relating them through their content.
> - In your response, you should employ a professional and informative tone.
----

#### Snippets

> 1. #### “TikTok: America’s Addiction Isn’t Just China’s Fault” by Karishma Vaswani
> There are few things that can get both the American left and right as exercised as the idea that a foreign nation is perverting the minds of their young. When that country is China, the full force of the US political system weighs in. That has resulted in the unanimous approval of a bill that would stop internet service providers and app stores from offering TikTok to consumers, unless the social media firm’s Chinese parent ByteDance Ltd. sells it within six months.

> The Energy and Commerce Committee voted to approve the bipartisan legislation, known as the Protecting Americans From Foreign Adversary Controlled Applications Act, by 50-0. It is expected to go to a full House floor vote next week. While there are legitimate reasons to be concerned about the impact of a foreign-owned social-media platform beloved by so many young Americans, it’s time for a little honesty and self-reflection. The US TikTok addiction isn’t just a Chinese problem. Homegrown tech has failed to keep up with the kind of innovation that Chinese firms have developed, and that’s why this app has become so popular. Forcing it to sever its mainland links will not solve that, especially as Beijing is unlikely to agree. It has already voiced strong opposition to the idea before.

----
> 2. #### “What if social media — even TikTok — is actually good for the world?” by Aaron Dinin
> Most public discourse about social media frames it as a sort of cancer on society. But what if, overall, social media – even TikTok – is actually good for the world? What if the anti-social media firebrands are just trying to distract us from what these platforms really do and why they’re so important?

> To understand what the people trying to vilify social media are hiding, we have to start by understanding that platforms such as TikTok, Instagram, LinkedIn and YouTube have one main goal: to keep users engaged.

> We can certainly debate the impacts of keeping users engaged – everything from addiction to misinformation – but the goal itself encourages an important sort of neutrality. The platforms don’t care what they show. They care about delivering engaging content to avoid losing market share.

> Compare that necessary neutrality with the publishing technologies that came before. Before the digital age, people who wanted to share their ideas with the world mostly published in books, journals, newspapers and other print media. Those technologies are all curated by small groups of people who determine what does and doesn’t get published.

> Hopefully you immediately recognize why media platforms curated by small, powerful editorial groups might be a bigger problem than the engagement-focused social media platforms people seem so worried about, but, for the sake of clarity, let’s get explicit:

> When a small group of people gatekeep the information that gets distributed to society, it allows that small and powerful group to control, manipulate and influence communities in ways that align with their interests rather than the interests of the broader public.

> For centuries, small groups of powerful people have been manipulating who and what gets published. We can find examples as far back as ancient Greece, where political leaders used epic poetry to impose a cultural hegemony around the Aegean peninsula, and we can find examples from Elizabethan England of the British monarchy trying to influence the plays of Shakespeare to manipulate public sentiment.

> Simply put, popular media technologies from every civilization have always impacted what people believe about their worlds, and controlling media has always been (and will always be) a way of exerting power. As a result, when new technologies distribute control of media to more people, they disrupt power and create a bit of public chaos while people adjust. Social media isn’t the first new publishing technology to cause this kind of chaos. For proof, you might ask the Catholic Church how it felt about the printing press after Martin Luther published the pamphlets that catalyzed the protestant reformation.

> We’re currently experiencing a similar kind of challenge to our established power structures during what are, historically speaking, the earliest days of digital media. Social media platforms aren’t a cancer on society. We’ve just never lived in a world where so many people could so easily share their ideas and beliefs. Now that TikTok, and other platforms like it, are disrupting a status quo that gave a relatively small number of people massive control over what opinions got shared with the world, we should expect some conflict between the people who used to control information and the people who have new ways of being heard.

----
> 3. #### “Opinion: Banning TikTok isn’t just a bad idea, it’s a dangerous one” by Evan Greer
> While some might be motivated by thinly-veiled xenophobia, lawmakers also rightly point to concerns about TikTok’s surveillance and capitalist business model, which vacuums up as much personal information about users as possible and then uses it to serve content that keeps us clicking, scrolling, and generating ad revenue. TikTok “spies” on us for profit. That’s not in question.

> The problem is that – while they might not be owned by a Chinese company – Instagram, YouTube, Facebook, Snapchat and Twitter all do it too, as privacy advocates have been warning for more than a decade. Banning TikTok won’t make us safer from China’s surveillance operations. Nor will it protect children, or anyone else, from getting addicted to Big Tech’s manipulative products. It’s just an ineffective solution that sounds good on TV.

> While many governments engage in internet censorship and surveillance, China certainly has one of the most sophisticated and draconian systems. A core characteristic of China’s censorship regime is the “Great Firewall,” which blocks foreign social media apps, news sites and even educational resources like Wikipedia, under the guise of protecting national security.

> As they hyperventilate about TikTok, US politicians are so eager to appear “tough on China” that they’re suggesting we build our very own Great Firewall here at home. There is a small but growing number of countries in the world so authoritarian that they block popular apps and websites entirely. It’s regrettable that so many US lawmakers want to add us to that list.

> Several of the proposals wending their way through Congress would grant the federal government unprecedented new powers to control what technology we can use and how we can express ourselves – authority that goes far beyond TikTok. The bipartisan RESTRICT Act (S. 686), for example, would enable the Commerce Department to engage in extraordinary acts of policing, criminalizing a wide range of activities with companies from “hostile” countries and potentially even banning entire apps simply by declaring them a threat to national security.

----
> 4. #### “The future of TikTok bans” by Tate Ryan-Mosley
> Recently, I drove from Washington, DC, to New York and passed through Maryland, Delaware, and New Jersey on the way while scrolling through Instagram, TikTok, and Twitter. Crossing all those state lines got me thinking about Montana and its recent ban on TikTok, the massive social media app owned by Chinese tech giant ByteDance.

> Are we really proceeding down a path where I might have to delete and re-download certain apps as I cross state lines? What is the future of TikTok bans, and could they ever actually be enforced?

> US policymakers have been scrutinizing the app intensely in recent months over concerns about Chinese espionage, but Montana’s ban is the most dramatic move so far. Legislators structured the law to target marketplaces like Google Play and Apple’s App Store. Starting on January 1, 2024, those companies could face a fine of $10,000 per day if they make TikTok available to users in Montana.

> A lot of pundits, politicians, and technologists have written off the ban as ridiculous, unconstitutional, and xenophobic. And it’s already seeing legal challenges. On Monday, TikTok filed a lawsuit against Montana following a suit from a group of users, citing Constitutional grounds.

> Eric Goldman, a law professor at Santa Clara University and co-director of the law school’s High Tech Law Institute, told me that he doubts the bans are anything more than a political play, intended to deliver a message: “It’s just propaganda, not actually an effort to keep Montanans safe.”

> There is still really no evidence that TikTok is handing over user data to the Chinese government on the scale that US politicians are claiming. But proposed TikTok bans are cropping up all over the US with mostly bipartisan support, and President Biden has threatened a national ban as well. It’s also not the first time US lawmakers have pushed a TikTok backlash; in 2020, the Trump administration tried to ban the app but was blocked after a judge determined there wasn’t enough evidence of Chinese spying.

> As for its enforceability, what would happen if Montana’s ban did go into effect? Would I have to delete the app if I went to visit Glacier National Park? That’s not at all likely, and the current law looks to cut off access to the app at the point of initial download—not for people who already have it on their phones.

----
> 5. #### “The legal case for Montana’s TikTok ban” by Joel Thayer
> Montana made history with its move to ban TikTok. Given that the state has a serious penchant for deregulation, it’s kind of a shocker. To put this in perspective, Montana was the last state to institute a speed limit, and yet it is now the first state to ban the controversial app.

> And for good reason. We know that ByteDance, TikTok’s Beijing-based parent company, can use and has used the data it accesses from TikTok. For instance, the Department of Justice is investigating ByteDance’s use of TikTok data to spy on American journalists.

> Montana’s law goes into effect on January 1, 2024. The law imposes a $10,000 fine on TikTok, Google and Apple for each day they make TikTok available to Montanans. (Full disclosure: I testified in favor of Montana’s bill at its House Judiciary Committee last month.)

> But before the ink could even dry, TikTok and a few Montana TikTok creators sued the state, arguing that the law is unconstitutional. Both briefs assert that Montana’s ban violates the First Amendment. TikTok’s brief goes further in arguing that it violates the Constitution’s prohibition against bills of attainder and, due to TikTok’s national reach, the Commerce Clause by attempting to regulate an interstate service. But the law is very likely to pass constitutional muster.

> Regarding the First Amendment, courts have consistently distinguished between conduct and speech to determine whether the First Amendment is applicable or prohibitive towards the enactment or enforcement of a particular policy. The Supreme Court held as much in Arcara v. Cloud Books, Inc. In that case, the New York state government shut down an adult bookstore for health violations because its owner used his store to facilitate prostitution. Even though we think of a bookstore as a quintessential venue for First Amendment activity, the Supreme Court ruled that the First Amendment did not prevent the government from shutting it down because the government was acting based on the owner’s decision to engage in prohibited, non-speech conduct, in this case the solicitation of prostitution.

> Montana’s law wisely targets the conduct of app stores and the app itself as opposed to the content occurring on the app. Indeed, the law makes clear that TikTok can operate in the state if it cuts ties with ByteDance. Given that ByteDance has shown that it uses TikTok to spy on Americans, and the ban is not attempting to ban certain users or speech on other platforms (e.g., Instagram, Snapchat, etc.), the law will most likely pass constitutional muster under the First Amendment or avoid the issue entirely.

> What’s more, Montana’s law is far from a bill of attainder. A bill of attainder is a law that punishes individuals for past offenses without a trial, which the Constitution forbids. The Constitution’s prohibition, however, doesn’t apply to laws that regulate future offenses, only past offenses. For example, the U.S. banned the future sales of Chinese telecom giant Huawei due to its ties to the Chinese government. Huawei even sued in federal court on the same theory as TikTok. The District Court disagreed with Huawei. Why? Well, the court held that Congress’s actions against Huawei were constitutional because it was not denying Huawei a trial for past offenses. Instead, it applied only to transactions that have not yet occurred and thus falls outside the scope of the type of punishment the Constitution seeks to protect against.

----

#### Questions

> 1. What is the consensus opinion regarding TikTok’s impact on society?
> 2. What is the consensus opinion regarding the favorability of a TikTok ban?
> 3. What is the consensus opinion regarding the legality (e.g., constitutionality) of a TikTok ban?
----

2. ### Python: Implementations


#### Directive

> Given a user query and corpus of text snippets, write a response that fully addresses every aspect of the query in 500-600 words, excepting any tables you choose to include, whose contents do not count toward this word count maximum. As you compose your response, employ a casual-but-professional tone, a style of writing that prioritizes clarity, and text formatting that aims to enhance the response’s overall readability. You may not begin any of your sentences with the article adjective "a", but you may begin your sentences with the article adjective "an", where appropriate.

> Use the Wikipedia article (snippet #1) to contextualize your responses.

> **Most importantly:** ***You should derive your response exclusively from the snippets of text data that I have provided.***


#### Snippets

> 1. **“Python (programming language) — Wikipedia**
> Python is a multi-paradigm programming language. Object-oriented programming and structured programming are fully supported, and many of their features support functional programming and aspect-oriented programming (including metaprogramming and metaobjects). Many other paradigms are supported via extensions, including design by contract and logic programming.

> Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory management. It uses dynamic name resolution (late binding), which binds method and variable names during program execution.

> Its design offers some support for functional programming in the Lisp tradition. It has `filter`, `map`, and `reduce` functions; list comprehensions, dictionaries, sets, and generator expressions. The standard library has two modules (`itertools` and `functools`) that implement functional tools borrowed from Haskell and Standard ML.

> Its core philosophy is summarized in the Zen of Python (PEP 20), which includes aphorisms such as:

> Beautiful is better than ugly.

> Explicit is better than implicit.

> Simple is better than complex.

> Complex is better than complicated.

> Readability counts.

> However, Python features regularly violate these principles and received criticism for adding unnecessary language bloat. Responses to these criticisms are that the Zen of Python is a guideline rather than a rule. New features have been so controversial that Guido van Rossum resigned as Benevolent Dictator for Life following vitriol over the addition of the assignment expression operator in Python 3.8.

> Nevertheless, rather than building all of its functionality into its core, Python was designed to be highly extensible via modules. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with ABC, which espoused the opposite approach.

> Python claims to strive for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to Perl's "there is more than one way to do it" motto, Python embraces a "there should be one—and preferably only one—obvious way to do it." philosophy. In practice, however, Python provides many ways to achieve the same task. There are, for example, at least three ways to format a string literal, with no certainty as to which one a programmer should use. Alex Martelli, a Fellow at the Python Software Foundation and Python book author, wrote: "To describe something as 'clever' is not considered a compliment in the Python culture."

> Python's developers usually strive to avoid premature optimization and reject patches to non-critical parts of the CPython reference implementation that would offer marginal increases in speed at the cost of clarity. Execution speed can be improved by moving speed-critical functions to extension modules written in languages such as C, or by using a just-in-time compiler like PyPy. It is also possible to cross-compile to other languages, but it either doesn't provide the full speed-up that might be expected, since Python is a very dynamic language, or a restricted subset of Python is compiled, and possibly semantics are slightly changed.

----
> 2. “**What's New  in Python 3.12**” **— Adam Turner**

> ### Summary — Release Highlights


> Python 3.12 is the latest stable release of the Python programming language, with a mix of changes to the language and the standard library. The library changes focus on cleaning up deprecated APIs, usability, and correctness. Of note, the `distutils` package has been removed from the standard library. Filesystem support in `os` and `pathlib` has seen a number of improvements, and several modules have better performance.

> The language changes focus on usability, as f-strings have had many limitations removed and ‘Did you mean …’ suggestions continue to improve. The new type parameter syntax and `type` statement improve ergonomics for using generic types and type aliases with static type checkers.

> This article doesn’t attempt to provide a complete specification of all new features, but instead gives a convenient overview. For full details, you should refer to the documentation, such as the Library Reference and Language Reference. If you want to understand the complete implementation and design rationale for a change, refer to the PEP for a particular new feature; but note that PEPs usually are not kept up-to-date once a feature has been fully implemented.


> #### New syntax features:


> - PEP 695, type parameter syntax and the `type` statement

> #### New grammar features:


> - PEP 701, f-strings in the grammar

> #### Interpreter improvements:


> - PEP 684, a unique per-interpreter GIL
> - PEP 669, low impact monitoring
> - Improved ‘Did you mean …’ suggestions for `NameError`, `ImportError`, and `SyntaxError` exceptions

> #### Python data model improvements:


> - PEP 688, using the buffer protocol from Python

> #### Significant improvements in the standard library:


> - The `pathlib.Path` class now supports subclassing
> - The `os` module received several improvements for Windows support
> - A command-line interface has been added to the `sqlite3` module
> - `isinstance()` checks against `runtime-checkable protocols` enjoy a speed up of between two and 20 times
> - The `asyncio` package has had a number of performance improvements, with some benchmarks showing a 75% speed up.
> - A command-line interface has been added to the `uuid` module
> - Due to the changes in PEP 701, producing tokens via the `tokenize` module is up to 64% faster.

> #### Security improvements:


> - Replace the builtin `hashlib` implementations of SHA1, SHA3, SHA2-384, SHA2-512, and MD5 with formally verified code from the HACL* project. These builtin implementations remain as fallbacks that are only used when OpenSSL does not provide them.

> #### C API improvements:


> - PEP 697, unstable C API tier
> - PEP 683, immortal objects

> #### CPython implementation improvements:


> - PEP 709, comprehension inlining
> - CPython support for the Linux `perf` profiler
> - Implement stack overflow protection on supported platforms

> #### New typing features:


> - PEP 692, using `TypedDict` to annotate **kwargs
> - PEP 698, `typing.override()` decorator

> #### Important deprecations, removals or restrictions:


> - **PEP 623**: Remove `wstr` from Unicode objects in Python’s C API, reducing the size of every `str` object by at least 8 bytes.
> - **PEP 632**: Remove the `distutils` package. See the migration guide for advice replacing the APIs it provided. The third-party Setuptools package continues to provide `distutils`, if you still require it in Python 3.12 and beyond.
> - gh-95299: Do not pre-install `setuptools` in virtual environments created with `venv`. This means that `distutils`, `setuptools`, `pkg_resources`, and `easy_install` will no longer available by default; to access these run `pip install setuptools` in the activated virtual environment.
> - The `asynchat`, `asyncore`, and `imp` modules have been removed, along with several `unittest.TestCase` method aliases.
----
> 3. “**Deprecations in Python 3.12 (Pt. 1)**“ **— Adam Turner**

> #### Deprecated](https://docs.python.org/3/whatsnew/3.12.html#deprecated)[


> - `argparse`: The *type*, *choices*, and *metavar* parameters of `argparse.BooleanOptionalAction` are deprecated and will be removed in 3.14. (Contributed by Nikita Sobolev in gh-92248.)
> - `ast`: The following `ast` features have been deprecated in documentation since Python 3.8, now cause a `DeprecationWarning` to be emitted at runtime when they are accessed or used, and will be removed in Python 3.14:
> 	- `ast.Num`
> 	- `ast.Str`
> 	- `ast.Bytes`
> 	- `ast.NameConstant`
> 	- `ast.Ellipsis`
> 	Use `ast.Constant` instead. (Contributed by Serhiy Storchaka in gh-90953.)

> - `asyncio`:
> 	- The child watcher classes `asyncio.MultiLoopChildWatcher`, `asyncio.FastChildWatcher`, `asyncio.AbstractChildWatcher` and `asyncio.SafeChildWatcher` are deprecated and will be removed in Python 3.14. (Contributed by Kumar Aditya in gh-94597.)
> 	- `asyncio.set_child_watcher()`, `asyncio.get_child_watcher()`, `asyncio.AbstractEventLoopPolicy.set_child_watcher()` and `asyncio.AbstractEventLoopPolicy.get_child_watcher()` are deprecated and will be removed in Python 3.14. (Contributed by Kumar Aditya in gh-94597.)
> 	- The `get_event_loop()` method of the default event loop policy now emits a `DeprecationWarning` if there is no current event loop set and it decides to create one. (Contributed by Serhiy Storchaka and Guido van Rossum in gh-100160.)
> - `calendar`: `calendar.January` and `calendar.February` constants are deprecated and replaced by `calendar.JANUARY` and `calendar.FEBRUARY`. (Contributed by Prince Roshan in gh-103636.)
> - `collections.abc`: Deprecated `collections.abc.ByteString`. Prefer `Sequence` or `collections.abc.Buffer`. For use in typing, prefer a union, like `bytes | bytearray`, or `collections.abc.Buffer`. (Contributed by Shantanu Jain in gh-91896.)
> - `datetime`: `datetime.datetime`’s `utcnow()` and `utcfromtimestamp()` are deprecated and will be removed in a future version. Instead, use timezone-aware objects to represent datetimes in UTC: respectively, call `now()` and `fromtimestamp()` with the *tz* parameter set to `datetime.UTC`. (Contributed by Paul Ganssle in gh-103857.)
> - `email`: Deprecate the *isdst* parameter in `email.utils.localtime()`. (Contributed by Alan Williams in gh-72346.)
> - `importlib.abc`: Deprecated the following classes, scheduled for removal in Python 3.14:
> 	- `importlib.abc.ResourceReader`
> 	- `importlib.abc.Traversable`
> 	- `importlib.abc.TraversableResources`
> 	Use `importlib.resources.abc` classes instead:

> 	- `importlib.resources.abc.Traversable`
> 	- `importlib.resources.abc.TraversableResources`
> 	(Contributed by Jason R. Coombs and Hugo van Kemenade in gh-93963.)

> - `itertools`: Deprecate the support for copy, deepcopy, and pickle operations, which is undocumented, inefficient, historically buggy, and inconsistent. This will be removed in 3.14 for a significant reduction in code volume and maintenance burden. (Contributed by Raymond Hettinger in gh-101588.)
> - `multiprocessing`: In Python 3.14, the default `multiprocessing` start method will change to a safer one on Linux, BSDs, and other non-macOS POSIX platforms where `'fork'` is currently the default (gh-84559). Adding a runtime warning about this was deemed too disruptive as the majority of code is not expected to care. Use the `get_context()` or `set_start_method()` APIs to explicitly specify when your code *requires* `'fork'`. See contexts and start methods.
> - `pkgutil`: `pkgutil.find_loader()` and `pkgutil.get_loader()` are deprecated and will be removed in Python 3.14; use `importlib.util.find_spec()` instead. (Contributed by Nikita Sobolev in gh-97850.)
> - `pty`: The module has two undocumented `master_open()` and `slave_open()` functions that have been deprecated since Python 2 but only gained a proper `DeprecationWarning` in 3.12. Remove them in 3.14. (Contributed by Soumendra Ganguly and Gregory P. Smith in gh-85984.)
----
> 4. “**Deprecations in Python 3.12 (Pt. 2)**” **— Adam Turner**
> **Deprecated**

> - `os`:
> 	- The `st_ctime` fields return by `os.stat()` and `os.lstat()` on Windows are deprecated. In a future release, they will contain the last metadata change time, consistent with other platforms. For now, they still contain the creation time, which is also available in the new `st_birthtime` field. (Contributed by Steve Dower in gh-99726.)
> 	- On POSIX platforms, `os.fork()` can now raise a `DeprecationWarning` when it can detect being called from a multithreaded process. There has always been a fundamental incompatibility with the POSIX platform when doing so. Even if such code *appeared* to work. We added the warning to raise awareness as issues encountered by code doing this are becoming more frequent. See the `os.fork()` documentation for more details along with this discussion on fork being incompatible with threads for *why* we’re now surfacing this longstanding platform compatibility problem to developers.
> 	When this warning appears due to usage of `multiprocessing` or `concurrent.futures` the fix is to use a different `multiprocessing` start method such as `"spawn"` or `"forkserver"`.

> - `shutil`: The *onerror* argument of `shutil.rmtree()` is deprecated; use *onexc* instead. (Contributed by Irit Katriel in gh-102828.)
> - `sqlite3`:
> 	- default adapters and converters are now deprecated. Instead, use the Adapter and converter recipes and tailor them to your needs. (Contributed by Erlend E. Aasland in gh-90016.)
> 	- In `execute()`, `DeprecationWarning` is now emitted when named placeholders are used together with parameters supplied as a sequence instead of as a `dict`. Starting from Python 3.14, using named placeholders with parameters supplied as a sequence will raise a `ProgrammingError`. (Contributed by Erlend E. Aasland in gh-101698.)
----
> 5. “**Deprecations in Python 3.12 (Pt. 3)" — Adam Turner**

> #### Deprecations


> - `sys`: The `sys.last_type`, `sys.last_value` and `sys.last_traceback` fields are deprecated. Use `sys.last_exc` instead. (Contributed by Irit Katriel in gh-102778.)
> - `tarfile`: Extracting tar archives without specifying *filter* is deprecated until Python 3.14, when `'data'` filter will become the default. See Extraction filters for details.
> - `typing`:
> 	- `typing.Hashable` and `typing.Sized`, aliases for `collections.abc.Hashable` and `collections.abc.Sized` respectively, are deprecated. (gh-94309.)
> 	- `typing.ByteString`, deprecated since Python 3.9, now causes a `DeprecationWarning` to be emitted when it is used. (Contributed by Alex Waygood in gh-91896.)
> - `xml.etree.ElementTree`: The module now emits `DeprecationWarning` when testing the truth value of an `xml.etree.ElementTree.Element`. Before, the Python implementation emitted `FutureWarning`, and the C implementation emitted nothing. (Contributed by Jacob Walls in gh-83122.)
> - The 3-arg signatures (type, value, traceback) of `coroutine throw()`, `generator throw()` and `async generator throw()` are deprecated and may be removed in a future version of Python. Use the single-arg versions of these functions instead. (Contributed by Ofey Chan in gh-89874.)
> - `DeprecationWarning` is now raised when `__package__` on a module differs from `__spec__.parent` (previously it was `ImportWarning`). (Contributed by Brett Cannon in gh-65961.)
> - Setting `__package__` or `__cached__` on a module is deprecated, and will cease to be set or taken into consideration by the import system in Python 3.14. (Contributed by Brett Cannon in gh-65961.)
> - The bitwise inversion operator (`~`) on bool is deprecated. It will throw an error in Python 3.14. Use `not` for logical negation of bools instead. In the rare case that you really need the bitwise inversion of the underlying `int`, convert to int explicitly: `~int(x)`. (Contributed by Tim Hoffmann in gh-103487.)
> - Accessing `co_lnotab` on code objects was deprecated in Python 3.10 via **PEP 626**, but it only got a proper `DeprecationWarning` in 3.12, therefore it will be removed in 3.14. (Contributed by Nikita Sobolev in gh-101866.)

#### Questions

1. What are the most significant changes introduced in Python 3.12?
2. Which elements have been deprecated in Python 3.12?
3. What do these key changes suggest about the future of the Python programming language?
